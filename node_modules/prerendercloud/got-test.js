const got = require("got");

const isRetryableStatusCode = code =>
  code === 500 || code === 503 || code === 504;

const isRetryable = (err, retries) =>
  retries < 3 &&
  err instanceof got.HTTPError &&
  isRetryableStatusCode(err.response.statusCode);

const origGotGet = got.get;

class GotGetWithRetry {
  constructor(origArguments) {
    this.origArguments = origArguments;
    this.attempts = 0;
  }
  get() {
    this.attempts += 1;
    return origGotGet.apply(got, this.origArguments).catch(err => {
      if (!isRetryable(err, this.attempts)) return Promise.reject(err);

      console.log(
        "retrying:",
        err.response.statusCode,
        "attempt:",
        this.attempts
      );

      return this.get();
    });
  }
}

got.get = function() {
  return new GotGetWithRetry(arguments).get();
};

// got.get = function() {
//   // const obj = { get() {}, attempts };

//   const origArgs = arguments;
//   // const obj = { origArgs: arguments, attempts: 0, get:}
//   // return (function() {
//   console.log("attempts", this.attempts);
//   if (!this.attempts) this.attempts = 0;
//   this.attempts += 1;
//   return origGotGet.apply(got, origArgs).catch(err => {
//     if (!isRetryable(err, this.attempts)) return Promise.reject(err);

//     console.log(
//       "retrying:",
//       err.response.statusCode,
//       "attempt:",
//       this.attempts
//     );

//     const noise = Math.random() * 100;

//     return got.get.apply(got, origArgs);
//   });
//   // })();
// };

got
  .get("http://localhost:8080/503")
  .then(console.log)
  .catch(() => got.get("http://localhost:8080/503").then(console.log))
  .catch(console.error);
